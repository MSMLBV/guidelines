"use strict";(self.webpackChunkguidelines=self.webpackChunkguidelines||[]).push([[4],{7915:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"guidelines/react-native","title":"React Native","description":"Welcome to the React Native Guidelines! This document outlines the best practices and conventions for developing React Native applications at MSML.","source":"@site/docs/guidelines/react-native.md","sourceDirName":"guidelines","slug":"/guidelines/react-native","permalink":"/guidelines/docs/guidelines/react-native","draft":false,"unlisted":false,"editUrl":"https://github.com/MSMLBV/guidelines/tree/master/docs/guidelines/react-native.md","tags":[],"version":"current","frontMatter":{"title":"React Native"},"sidebar":"docs","previous":{"title":"Laravel & PHP","permalink":"/guidelines/docs/guidelines/laravel-php"},"next":{"title":"CSS/SCSS","permalink":"/guidelines/docs/guidelines/stylesheets"}}');var t=s(4848),r=s(8453);const l={title:"React Native"},o="React Native",a={},c=[{value:"Project Structure",id:"project-structure",level:2},{value:"General Principles",id:"general-principles",level:2},{value:"State Management",id:"state-management",level:2},{value:"Best Practices",id:"best-practices",level:3},{value:"Additional State Tools",id:"additional-state-tools",level:3},{value:"Navigation",id:"navigation",level:2},{value:"Guidelines",id:"guidelines",level:3},{value:"Advanced Configurations",id:"advanced-configurations",level:3},{value:"Guidelines",id:"guidelines-1",level:3},{value:"Styling",id:"styling",level:2},{value:"Responsive Design",id:"responsive-design",level:3},{value:"Theming",id:"theming",level:3},{value:"Best Practices",id:"best-practices-1",level:3},{value:"Components",id:"components",level:2},{value:"Naming Conventions",id:"naming-conventions",level:3},{value:"Guidelines",id:"guidelines-2",level:3},{value:"Naming Conventions",id:"naming-conventions-1",level:3},{value:"Guidelines",id:"guidelines-3",level:3},{value:"Debugging",id:"debugging",level:2},{value:"Common Debugging Tools",id:"common-debugging-tools",level:3},{value:"Common Scenarios",id:"common-scenarios",level:3},{value:"Steps:",id:"steps",level:4}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"react-native",children:"React Native"})}),"\n",(0,t.jsxs)(n.p,{children:["Welcome to the ",(0,t.jsx)(n.strong,{children:"React Native Guidelines"}),"! This document outlines the best practices and conventions for developing React Native applications at MSML."]}),"\n",(0,t.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,t.jsx)(n.p,{children:"Organize files and folders consistently for better maintainability. The structure should match the following:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"App/\n  Assets/\n    Fonts/\n    Images/\n  Components/\n    MButton/\n      MButton.js\n      MButtonStyle.js\n    MHeaderIcon/\n      MHeaderIcon.js\n      MHeaderIconStyle.js\n  Containers/\n    Dashboard/\n      DashboardScreen.js\n      DashboardScreenStyle.js\n    Home/\n      HomeScreen.js\n      HomeScreenStyle.js\n  Helpers/\n    AlertHelper.js\n    DateHelper.js\n  Navigators/\n    AuthStack.js\n    HomeStack.js\n  Services/\n    ApiService.js\n    AuthService.js\n  Stores/\n    RootStore.js\n    UserStore.js\n  Theme/\n    Colors.js\n    Fonts.js\n  App.js\n  ReactotronConfig.js\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Assets"}),": Images, fonts, and other static resources."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Components"}),": Reusable UI components with individual directories for modular styling."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Containers"}),": Screens or views managing state and lifecycle methods."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Helpers"}),": Utility functions and constants shared across the app."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Navigators"}),": Navigation stacks and configurations."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Services"}),": API calls and external integrations."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Stores"}),": State management using MobX State Tree."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Theme"}),": Application styling, including colors, fonts, and global styles."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"App.js"}),": The entry point of the application."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"ReactotronConfig.js"}),": Configuration for Reactotron debugging."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"general-principles",children:"General Principles"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Consistency"}),": Follow a consistent structure and style across projects. Use ESLint and Prettier to enforce coding standards, and align with shared code formatting rules defined in the project."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Modularity"}),": Write reusable components and keep business logic separate from UI logic. Use well-documented libraries such as lodash for utility functions."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance"}),": Optimize for smooth animations and fast rendering. Avoid unnecessary re-renders by leveraging React.memo and useMemo."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Accessibility"}),": Ensure that applications are usable for everyone. Follow WCAG guidelines and test using screen readers."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Scalability"}),": Design with future growth in mind, ensuring the app can handle increasing complexity and data. Structure stores and services to accommodate additional features seamlessly."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Modularity"}),": Write reusable components and keep business logic separate from UI logic."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance"}),": Optimize for smooth animations and fast rendering."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Accessibility"}),": Ensure that applications are usable for everyone."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Scalability"}),": Design with future growth in mind, ensuring the app can handle increasing complexity and data."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"state-management",children:"State Management"}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.strong,{children:"MobX State Tree (MST)"})," for state management."]}),"\n",(0,t.jsx)(n.h3,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Centralize shared states in the ",(0,t.jsx)(n.code,{children:"RootStore"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Use specific stores (e.g., ",(0,t.jsx)(n.code,{children:"UserStore"}),") for domain-specific logic."]}),"\n",(0,t.jsx)(n.li,{children:"Keep actions and derived state close to where they are used."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"additional-state-tools",children:"Additional State Tools"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Realm"}),": Use for local data persistence and offline-first functionality when working with structured data."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"React Query"}),": Best for handling server-side state and API data fetching with caching capabilities."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"navigation",children:"Navigation"}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.strong,{children:"React Navigation v6"})," for managing navigation."]}),"\n",(0,t.jsx)(n.h3,{id:"guidelines",children:"Guidelines"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Structure navigation stacks to align with the app's flow."}),"\n",(0,t.jsxs)(n.li,{children:["Prefer tab-based navigation (",(0,t.jsx)(n.code,{children:"TabStack"}),") for simpler apps and drawer menus (",(0,t.jsx)(n.code,{children:"DrawerStack"}),") for complex hierarchies."]}),"\n",(0,t.jsxs)(n.li,{children:["Set screen-specific options such as:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"<Stack.Screen\n  name=\"Home\"\n  component={HomeScreen}\n  options={{ headerShown: false, cardStyle: { backgroundColor: '#fff' } }}\n/>\n"})}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Leverage deep linking for external navigation needs."}),"\n",(0,t.jsx)(n.li,{children:"Use dynamic params for passing data between screens efficiently."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"advanced-configurations",children:"Advanced Configurations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Nested Navigators"}),": Use nested navigators for modular app structure:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'<Stack.Navigator>\n  <Stack.Screen name="Main" component={MainTabNavigator} />\n  <Stack.Screen name="Details" component={DetailsScreen} />\n</Stack.Navigator>\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Custom Transition Animations"}),": Define custom animations for screen transitions:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'<Stack.Navigator\n  screenOptions={{\n    cardStyleInterpolator: ({ current, layouts }) => {\n      return {\n        cardStyle: {\n          transform: [\n            {\n              translateX: current.progress.interpolate({\n                inputRange: [0, 1],\n                outputRange: [layouts.screen.width, 0],\n              }),\n            },\n          ],\n        },\n      };\n    },\n  }}\n>\n  <Stack.Screen name="Home" component={HomeScreen} />\n</Stack.Navigator>\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Conditional Navigation"}),": Redirect users based on state or props:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"if (!isLoggedIn) {\n  navigation.replace('Login');\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"guidelines-1",children:"Guidelines"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Structure navigation stacks to align with the app's flow."}),"\n",(0,t.jsxs)(n.li,{children:["Prefer tab-based navigation (",(0,t.jsx)(n.code,{children:"TabStack"}),") for simpler apps and drawer menus (",(0,t.jsx)(n.code,{children:"DrawerStack"}),") for complex hierarchies."]}),"\n",(0,t.jsxs)(n.li,{children:["Set screen-specific options such as:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"<Stack.Screen\n  name=\"Home\"\n  component={HomeScreen}\n  options={{ headerShown: false, cardStyle: { backgroundColor: '#fff' } }}\n/>\n"})}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Leverage deep linking for external navigation needs."}),"\n",(0,t.jsx)(n.li,{children:"Use dynamic params for passing data between screens efficiently."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"styling",children:"Styling"}),"\n",(0,t.jsx)(n.p,{children:"Use a consistent styling approach."}),"\n",(0,t.jsx)(n.h3,{id:"responsive-design",children:"Responsive Design"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.strong,{children:"flexbox"})," for layout to ensure components adjust fluidly to screen sizes."]}),"\n",(0,t.jsx)(n.li,{children:"Test designs on multiple devices and orientations (portrait and landscape)."}),"\n",(0,t.jsxs)(n.li,{children:["Utilize libraries like ",(0,t.jsx)(n.strong,{children:"react-native-responsive-dimensions"})," or ",(0,t.jsx)(n.strong,{children:"react-native-size-matters"})," for scalable dimensions."]}),"\n",(0,t.jsx)(n.li,{children:"Define breakpoints for screen sizes and apply conditional styling."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"theming",children:"Theming"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Implement dark and light mode themes for better user experience."}),"\n",(0,t.jsx)(n.li,{children:"Use a centralized theme file to define application-wide colors, typography, and spacing."}),"\n",(0,t.jsx)(n.li,{children:"Dynamically switch themes using context or state management."}),"\n",(0,t.jsx)(n.li,{children:"Follow platform-specific design guidelines (Material Design for Android, Human Interface Guidelines for iOS)."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"best-practices-1",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.strong,{children:"CSS-in-JS"})," libraries or ",(0,t.jsx)(n.strong,{children:"StyleSheet.create"})," for styles."]}),"\n",(0,t.jsxs)(n.li,{children:["Store global styles in a ",(0,t.jsx)(n.code,{children:"Theme"})," directory."]}),"\n",(0,t.jsx)(n.li,{children:"Define default spacing, colors, and typography in constants."}),"\n",(0,t.jsx)(n.li,{children:"Implement dark and light mode themes for better user experience."}),"\n",(0,t.jsx)(n.li,{children:"Follow platform-specific design guidelines (Material Design for Android, Human Interface Guidelines for iOS)."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"components",children:"Components"}),"\n",(0,t.jsx)(n.h3,{id:"naming-conventions",children:"Naming Conventions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Prefix shared components with ",(0,t.jsx)(n.code,{children:"M"})," (e.g., ",(0,t.jsx)(n.code,{children:"MButton"}),", ",(0,t.jsx)(n.code,{children:"MHeader"}),")."]}),"\n",(0,t.jsx)(n.li,{children:"Use PascalCase for component names."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"guidelines-2",children:"Guidelines"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Always use ",(0,t.jsx)(n.strong,{children:"functional components"})," instead of class components to leverage hooks and improve readability.","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"// Good\nconst MyComponent = ({ title }) => {\n  return <h1>{title}</h1>;\n};\n\n// Avoid\nclass MyComponent extends React.Component {\n  render() {\n    return <h1>{this.props.title}</h1>;\n  }\n}\n"})}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Components should be self-contained and reusable."}),"\n",(0,t.jsx)(n.li,{children:"Avoid inline styles in components."}),"\n",(0,t.jsx)(n.li,{children:"Document prop types with TypeScript for better type safety and IDE support."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"naming-conventions-1",children:"Naming Conventions"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Prefix shared components with ",(0,t.jsx)(n.code,{children:"M"})," (e.g., ",(0,t.jsx)(n.code,{children:"MButton"}),", ",(0,t.jsx)(n.code,{children:"MHeader"}),")."]}),"\n",(0,t.jsx)(n.li,{children:"Use PascalCase for component names."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"guidelines-3",children:"Guidelines"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Always use ",(0,t.jsx)(n.strong,{children:"functional components"})," instead of class components to leverage hooks and improve readability.","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:"// Good\nconst MyComponent = ({ title }) => {\n  return <h1>{title}</h1>;\n};\n\n// Avoid\nclass MyComponent extends React.Component {\n  render() {\n    return <h1>{this.props.title}</h1>;\n  }\n}\n"})}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Components should be self-contained and reusable."}),"\n",(0,t.jsx)(n.li,{children:"Avoid inline styles in components."}),"\n",(0,t.jsx)(n.li,{children:"Document prop types with TypeScript for better type safety and IDE support."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"debugging",children:"Debugging"}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.strong,{children:"Reactotron"})," for debugging during development."]}),"\n",(0,t.jsx)(n.h3,{id:"common-debugging-tools",children:"Common Debugging Tools"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Reactotron"}),": For logging, tracking state changes, and monitoring API requests."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"common-scenarios",children:"Common Scenarios"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"UI Layout Issues"}),': Use the "Inspect" tool in Flipper to verify component alignment and styling.']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Network Failures"}),": Monitor API calls and responses using Reactotron."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Crash Logs"}),": Check error messages in the console or use Sentry for tracking runtime exceptions."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"steps",children:"Steps:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Install Reactotron."}),"\n",(0,t.jsxs)(n.li,{children:["Configure the ",(0,t.jsx)(n.code,{children:"ReactotronConfig.js"})," file."]}),"\n",(0,t.jsxs)(n.li,{children:["Log debug information using:","\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"console.tron.log('Debug Info');\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This document serves as a comprehensive guide for React Native development at MSML. Refer to specific project requirements for any additional conventions or practices."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var i=s(6540);const t={},r=i.createContext(t);function l(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);