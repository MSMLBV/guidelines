"use strict";(self.webpackChunkguidelines=self.webpackChunkguidelines||[]).push([[417],{9147:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"guidelines/laravel-php","title":"Laravel & PHP","description":"About Laravel","source":"@site/docs/guidelines/laravel-php.md","sourceDirName":"guidelines","slug":"/guidelines/laravel-php","permalink":"/guidelines/docs/guidelines/laravel-php","draft":false,"unlisted":false,"editUrl":"https://github.com/MSMLBV/guidelines/tree/master/docs/guidelines/laravel-php.md","tags":[],"version":"current","frontMatter":{"title":"Laravel & PHP"},"sidebar":"docs","previous":{"title":"Welcome","permalink":"/guidelines/docs/"},"next":{"title":"React Native","permalink":"/guidelines/docs/guidelines/react-native"}}');var r=s(4848),l=s(8453);const t={title:"Laravel & PHP"},o=void 0,a={},d=[{value:"About Laravel",id:"about-laravel",level:2},{value:"General PHP Rules",id:"general-php-rules",level:2},{value:"Code Style Standards",id:"code-style-standards",level:3},{value:"Variable Naming",id:"variable-naming",level:3},{value:"Class Defaults",id:"class-defaults",level:3},{value:"Nullable and Union Types",id:"nullable-and-union-types",level:3},{value:"Void Return Types",id:"void-return-types",level:3},{value:"Typed Properties",id:"typed-properties",level:3},{value:"Enums",id:"enums",level:3},{value:"Docblocks",id:"docblocks",level:3},{value:"Iterable Docblocks",id:"iterable-docblocks",level:3},{value:"Constructor property promotion",id:"constructor-property-promotion",level:2},{value:"Traits",id:"traits",level:2},{value:"Strings",id:"strings",level:2},{value:"Ternary operators",id:"ternary-operators",level:2},{value:"If statements",id:"if-statements",level:2},{value:"Bracket position",id:"bracket-position",level:3},{value:"Happy path",id:"happy-path",level:3},{value:"Avoid else",id:"avoid-else",level:3},{value:"Compound ifs",id:"compound-ifs",level:3},{value:"Strict comparisons",id:"strict-comparisons",level:2},{value:"Naming Conventions for variables",id:"naming-conventions-for-variables",level:2},{value:"PHP Variables",id:"php-variables",level:3},{value:"Passing data from controllers to views",id:"passing-data-from-controllers-to-views",level:3},{value:"Example",id:"example",level:3},{value:"Why?",id:"why",level:4},{value:"Comments",id:"comments",level:2},{value:"Whitespace",id:"whitespace",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Artisan Commands",id:"artisan-commands",level:2},{value:"Naming",id:"naming",level:3},{value:"Structure",id:"structure",level:3},{value:"Example",id:"example-1",level:4},{value:"User Feedback",id:"user-feedback",level:3},{value:"Example",id:"example-2",level:4},{value:"Iterative Processing",id:"iterative-processing",level:3},{value:"Example",id:"example-3",level:4},{value:"Routing",id:"routing",level:2},{value:"URL Structure",id:"url-structure",level:3},{value:"Route Definition",id:"route-definition",level:3},{value:"Route Names",id:"route-names",level:3},{value:"HTTP Verb Placement",id:"http-verb-placement",level:3},{value:"Route Parameters",id:"route-parameters",level:3},{value:"URL Formatting",id:"url-formatting",level:3},{value:"API Routing",id:"api-routing",level:2},{value:"Naming Conventions",id:"naming-conventions",level:3},{value:"Examples",id:"examples",level:4},{value:"Route Structure",id:"route-structure",level:3},{value:"Limit Deep Nesting",id:"limit-deep-nesting",level:4},{value:"Provide Context When Necessary",id:"provide-context-when-necessary",level:4},{value:"Flatten for Independence",id:"flatten-for-independence",level:4},{value:"Additional Guidelines",id:"additional-guidelines",level:3},{value:"Example",id:"example-4",level:4},{value:"Controllers",id:"controllers",level:2},{value:"Views",id:"views",level:2},{value:"Validation",id:"validation",level:2},{value:"Blade Templates",id:"blade-templates",level:2},{value:"Authorization",id:"authorization",level:2},{value:"Translations",id:"translations",level:2},{value:"Naming Classes",id:"naming-classes",level:2},{value:"General Rules",id:"general-rules",level:3},{value:"Controllers",id:"controllers-1",level:3},{value:"Naming Convention:",id:"naming-convention",level:4},{value:"Resources (and Transformers)",id:"resources-and-transformers",level:3},{value:"Naming Convention:",id:"naming-convention-1",level:4},{value:"Request Classes",id:"request-classes",level:3},{value:"Naming Convention:",id:"naming-convention-2",level:4},{value:"Jobs",id:"jobs",level:3},{value:"Naming Convention:",id:"naming-convention-3",level:4},{value:"Events",id:"events",level:3},{value:"Naming Convention:",id:"naming-convention-4",level:4},{value:"Listeners",id:"listeners",level:3},{value:"Naming Convention:",id:"naming-convention-5",level:4},{value:"Commands",id:"commands",level:3},{value:"Naming Convention:",id:"naming-convention-6",level:4},{value:"Mailables",id:"mailables",level:3},{value:"Naming Convention:",id:"naming-convention-7",level:4},{value:"Enums",id:"enums-1",level:3},{value:"Naming Convention:",id:"naming-convention-8",level:4},{value:"Example Directory Structure",id:"example-directory-structure",level:3}];function c(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"about-laravel",children:"About Laravel"}),"\n",(0,r.jsxs)(n.p,{children:["First and foremost, Laravel provides the most value when you write things the way Laravel intended you to write. If there's a documented way to achieve something, follow it. Whenever you do something differently, make sure you have a justification for ",(0,r.jsx)(n.em,{children:"why"})," you didn't follow the defaults."]}),"\n",(0,r.jsx)(n.h2,{id:"general-php-rules",children:"General PHP Rules"}),"\n",(0,r.jsx)(n.h3,{id:"code-style-standards",children:"Code Style Standards"}),"\n",(0,r.jsx)(n.p,{children:"All code must adhere to the following standards:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"http://www.php-fig.org/psr/psr-1/",children:"PSR-1"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"http://www.php-fig.org/psr/psr-2/",children:"PSR-2"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.php-fig.org/psr/psr-12/",children:"PSR-12"})}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Consistent styling ensures readability and maintainability across the codebase."}),"\n",(0,r.jsx)(n.h3,{id:"variable-naming",children:"Variable Naming"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.strong,{children:"camelCase"})," for variables and method names."]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.strong,{children:"PascalCase"})," for class names."]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.strong,{children:"UPPER_SNAKE_CASE"})," for constants."]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{title:"Good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"$activeUsersCount = 42;\nclass UserManagement {}\ndefine('MAX_LOGIN_ATTEMPTS', 3);\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"Bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"$active_users_count = 42;\nclass user_management {}\nconst maxLoginAttempts = 3;\n"})})}),"\n",(0,r.jsx)(n.h3,{id:"class-defaults",children:"Class Defaults"}),"\n",(0,r.jsxs)(n.p,{children:["Avoid using the ",(0,r.jsx)(n.code,{children:"final"})," keyword unless absolutely necessary. Flexibility in extending functionality is preferred."]}),"\n",(0,r.jsx)(n.admonition,{title:"Good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"class UserService\n{\n    public function activateUser(User $user)\n    {\n        $user->activate();\n    }\n}\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"Bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"final class UserService\n{\n    public function activateUser(User $user)\n    {\n        $user->activate();\n    }\n}\n"})})}),"\n",(0,r.jsx)(n.h3,{id:"nullable-and-union-types",children:"Nullable and Union Types"}),"\n",(0,r.jsx)(n.p,{children:"When using nullable types, prefer the short nullable syntax."}),"\n",(0,r.jsx)(n.admonition,{title:"Good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"public ?int $userId;\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"Bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"public int | null $userId;\n"})})}),"\n",(0,r.jsx)(n.h3,{id:"void-return-types",children:"Void Return Types"}),"\n",(0,r.jsxs)(n.p,{children:["Indicate explicitly when a method does not return a value by using the ",(0,r.jsx)(n.code,{children:"void"})," return type."]}),"\n",(0,r.jsx)(n.admonition,{title:"Good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"public function sendNotification(): void\n{\n    Notification::send($this->user, new WelcomeMessage());\n}\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"Bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"public function sendNotification()\n{\n    Notification::send($this->user, new WelcomeMessage());\n}\n"})})}),"\n",(0,r.jsx)(n.h3,{id:"typed-properties",children:"Typed Properties"}),"\n",(0,r.jsx)(n.p,{children:"Always type properties whenever possible. Avoid using docblocks to specify types unless absolutely necessary."}),"\n",(0,r.jsx)(n.admonition,{title:"Good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"class Order\n{\n    public string $status;\n    public DateTime $createdAt;\n}\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"Bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"class Order\n{\n    /** @var string */\n    public $status;\n    /** @var DateTime */\n    public $createdAt;\n}\n"})})}),"\n",(0,r.jsx)(n.h3,{id:"enums",children:"Enums"}),"\n",(0,r.jsxs)(n.p,{children:["Values in enums should follow ",(0,r.jsx)(n.strong,{children:"PascalCase"})," naming conventions."]}),"\n",(0,r.jsx)(n.admonition,{title:"Good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"enum PaymentStatus {\n    case Pending;\n    case Completed;\n    case Failed;\n}\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"Bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"enum PaymentStatus {\n    case pending;\n    case COMPLETED;\n    case failed;\n}\n"})})}),"\n",(0,r.jsx)(n.h3,{id:"docblocks",children:"Docblocks"}),"\n",(0,r.jsx)(n.p,{children:"Avoid redundant docblocks. Use them only when they provide additional context or clarity beyond type hints."}),"\n",(0,r.jsx)(n.admonition,{title:"Good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"class Product\n{\n    /**\n     * Calculate the product's total price, including tax.\n     */\n    public function calculateTotalPrice(): float\n    {\n        return $this->price * 1.21;\n    }\n}\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"Bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"class Product\n{\n    /**\n     * @return float The product's total price, including tax.\n     */\n    public function calculateTotalPrice(): float\n    {\n        return $this->price * 1.21;\n    }\n}\n"})})}),"\n",(0,r.jsx)(n.h3,{id:"iterable-docblocks",children:"Iterable Docblocks"}),"\n",(0,r.jsx)(n.p,{children:"When working with arrays or collections, include key and value types in the docblocks to improve clarity and IDE support."}),"\n",(0,r.jsx)(n.admonition,{title:"Good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"/**\n * @param array<int, User> $users\n */\nfunction notifyUsers(array $users): void\n{\n    foreach ($users as $user) {\n        $user->notify(new AccountAlert());\n    }\n}\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"Bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"/**\n * @param array $users\n */\nfunction notifyUsers(array $users): void\n{\n    foreach ($users as $user) {\n        $user->notify(new AccountAlert());\n    }\n}\n"})})}),"\n",(0,r.jsx)(n.p,{children:"By adhering to these general rules, the codebase remains clean, consistent, and easy to maintain."}),"\n",(0,r.jsx)(n.h2,{id:"constructor-property-promotion",children:"Constructor property promotion"}),"\n",(0,r.jsx)(n.p,{children:"Use constructor property promotion if all properties can be promoted. To make it readable, put each one on a line of its own. Use a comma after the last one."}),"\n",(0,r.jsx)(n.admonition,{title:"good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"class MyClass {\n    public function __construct(\n        protected string $firstArgument,\n        protected string $secondArgument,\n    ) {}\n}\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"class MyClass {\n    protected string $secondArgument\n\n    public function __construct(protected string $firstArgument, string $secondArgument)\n    {\n        $this->secondArgument = $secondArgument;\n    }\n}\n"})})}),"\n",(0,r.jsx)(n.h2,{id:"traits",children:"Traits"}),"\n",(0,r.jsxs)(n.p,{children:["Each applied trait should go on its own line, and the ",(0,r.jsx)(n.code,{children:"use"})," keyword should be used for each of them. This will result in clean diffs when traits are added or removed."]}),"\n",(0,r.jsx)(n.admonition,{title:"good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"class MyClass\n{\n    use TraitA;\n    use TraitB;\n}\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"class MyClass\n{\n    use TraitA, TraitB;\n}\n"})})}),"\n",(0,r.jsx)(n.h2,{id:"strings",children:"Strings"}),"\n",(0,r.jsxs)(n.p,{children:["When possible prefer string interpolation above ",(0,r.jsx)(n.code,{children:"sprintf"})," and the ",(0,r.jsx)(n.code,{children:"."})," operator."]}),"\n",(0,r.jsx)(n.admonition,{title:"good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:'$greeting = "Hi, I am {$name}.";\n'})})}),"\n",(0,r.jsx)(n.admonition,{title:"bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"$greeting = 'Hi, I am ' . $name . '.';\n"})})}),"\n",(0,r.jsx)(n.h2,{id:"ternary-operators",children:"Ternary operators"}),"\n",(0,r.jsx)(n.p,{children:"Every portion of a ternary expression should be on its own line unless it's a really short expression."}),"\n",(0,r.jsx)(n.admonition,{title:"good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"$name = $isFoo ? 'foo' : 'bar';\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"$result = $object instanceof Model ?\n    $object->name :\n   'A default value';\n"})})}),"\n",(0,r.jsx)(n.h2,{id:"if-statements",children:"If statements"}),"\n",(0,r.jsx)(n.h3,{id:"bracket-position",children:"Bracket position"}),"\n",(0,r.jsx)(n.p,{children:"Always use curly brackets."}),"\n",(0,r.jsx)(n.admonition,{title:"good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"if ($condition) {\n   ...\n}\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"if ($condition) ...\n"})})}),"\n",(0,r.jsx)(n.h3,{id:"happy-path",children:"Happy path"}),"\n",(0,r.jsx)(n.p,{children:"Generally a function should have its unhappy path first and its happy path last. In most cases this will cause the happy path being in an unindented part of the function which makes it more readable."}),"\n",(0,r.jsx)(n.admonition,{title:"good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"if (!$goodCondition) {\n  throw new Exception;\n}\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"if ($goodCondition) {\n // do work\n}\n\nthrow new Exception;\n"})})}),"\n",(0,r.jsx)(n.h3,{id:"avoid-else",children:"Avoid else"}),"\n",(0,r.jsxs)(n.p,{children:["In general, ",(0,r.jsx)(n.code,{children:"else"})," should be avoided because it makes code less readable. In most cases it can be refactored using early returns. This will also cause the happy path to go last, which is desirable."]}),"\n",(0,r.jsx)(n.admonition,{title:"good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"if (!$conditionA) {\n   // condition A failed\n\n   return;\n}\n\nif (!$conditionB) {\n   // condition A passed, B failed\n\n   return;\n}\n\n// condition A and B passed\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"if ($conditionA) {\n   if ($conditionB) {\n      // condition A and B passed\n   }\n   else {\n     // condition A passed, B failed\n   }\n}\nelse {\n   // condition A failed\n}\n"})})}),"\n",(0,r.jsxs)(n.p,{children:["Another option to refactor an ",(0,r.jsx)(n.code,{children:"else"})," away is using a ternary"]}),"\n",(0,r.jsx)(n.admonition,{title:"bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"if ($condition) {\n    $this->doSomething();\n} \nelse {\n    $this->doSomethingElse();\n}\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"$condition\n    ? $this->doSomething()\n    : $this->doSomethingElse();\n"})})}),"\n",(0,r.jsx)(n.h3,{id:"compound-ifs",children:"Compound ifs"}),"\n",(0,r.jsxs)(n.p,{children:["In general, separate ",(0,r.jsx)(n.code,{children:"if"})," statements should be preferred over a compound condition. This makes debugging code easier."]}),"\n",(0,r.jsx)(n.admonition,{title:"good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"if (!$conditionA) {\n   return;\n}\n\nif (!$conditionB) {\n   return;\n}\n\nif (!$conditionC) {\n   return;\n}\n\n// do stuff\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"if ($conditionA && $conditionB && $conditionC) {\n  // do stuff\n}\n"})})}),"\n",(0,r.jsx)(n.h2,{id:"strict-comparisons",children:"Strict comparisons"}),"\n",(0,r.jsxs)(n.p,{children:["Always use strict comparisons (",(0,r.jsx)(n.code,{children:"!=="}),", ",(0,r.jsx)(n.code,{children:"==="}),") instead of loose comparisons (",(0,r.jsx)(n.code,{children:"!="}),", ",(0,r.jsx)(n.code,{children:"=="}),"). Strict comparisons ensure type safety and reduce unexpected behavior."]}),"\n",(0,r.jsx)(n.admonition,{title:"good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"// Good\nif ($value !== null) {\n    // Do something\n}\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"// Bad\nif ($value != null) {\n    // Do something\n}\n"})})}),"\n",(0,r.jsx)(n.h2,{id:"naming-conventions-for-variables",children:"Naming Conventions for variables"}),"\n",(0,r.jsx)(n.h3,{id:"php-variables",children:"PHP Variables"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"camelCase"})," for variable names within PHP classes."]}),"\n",(0,r.jsxs)(n.li,{children:["For constants, use ",(0,r.jsx)(n.code,{children:"UPPER_SNAKE_CASE"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Enums should use ",(0,r.jsx)(n.code,{children:"PascalCase"})," for their values."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"passing-data-from-controllers-to-views",children:"Passing data from controllers to views"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"snake_case"})," for keys in the data array when passing data to views and accessing them in Blade templates. This aligns with traditional Laravel conventions and improves readability in Blade."]}),"\n",(0,r.jsx)(n.li,{children:"Maintain consistency in variable naming across the application."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Controller:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"class ExampleController extends Controller\n{\n    public function show()\n    {\n        $userName = 'John Doe';\n        $userAge = 25;\n\n        return view('example', [\n            'user_name' => $userName, // snake_case for view keys\n            'user_age' => $userAge,  // snake_case for view keys\n        ]);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Blade View:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"<h1>Welcome, {{ $user_name }}</h1>\n<p>Age: {{ $user_age }}</p>\n"})}),"\n",(0,r.jsx)(n.h4,{id:"why",children:"Why?"}),"\n",(0,r.jsxs)(n.p,{children:["Using ",(0,r.jsx)(n.code,{children:"snake_case"})," for view keys aligns with traditional Laravel conventions and ensures consistency across the codebase. It also makes the data structure more predictable when working with Blade templates, reducing ambiguity and improving maintainability."]}),"\n",(0,r.jsx)(n.h2,{id:"comments",children:"Comments"}),"\n",(0,r.jsx)(n.p,{children:"Comments should be avoided as much as possible by writing expressive code. If you do need to use a comment, format it like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"// There should be a space before a single line comment.\n\n/*\n * If you need to explain a lot you can use a comment block. Notice the\n * single * on the first line. Comment blocks don't need to be three\n * lines long or three characters shorter than the previous line.\n */\n"})}),"\n",(0,r.jsx)(n.p,{children:"A possible strategy to refactor away a comment is to create a function with name that describes the comment"}),"\n",(0,r.jsx)(n.admonition,{title:"good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"$this->calculateLoans();\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"// Start calculating loans\n$this->calculateLoans();\n"})})}),"\n",(0,r.jsx)(n.h2,{id:"whitespace",children:"Whitespace"}),"\n",(0,r.jsx)(n.p,{children:"Statements should be allowed to breathe. In general always add blank lines between statements, unless they're a sequence of single-line equivalent operations. This isn't something enforceable, it's a matter of what looks best in its context."}),"\n",(0,r.jsx)(n.admonition,{title:"good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"public function getPage($url)\n{\n    $page = $this->pages()->where('slug', $url)->first();\n\n    if (!$page) {\n        return null;\n    }\n\n    if ($page['private'] && !Auth::check()) {\n        return null;\n    }\n\n    return $page;\n}\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"// Everything's cramped together.\npublic function getPage($url)\n{\n    $page = $this->pages()->where('slug', $url)->first();\n    if (!$page) {\n        return null;\n    }\n    if ($page['private'] && !Auth::check()) {\n        return null;\n    }\n    return $page;\n}\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"// A sequence of single-line equivalent operations.\npublic function up()\n{\n    Schema::create('users', function (Blueprint $table) {\n        $table->increments('id');\n        $table->string('name');\n        $table->string('email')->unique();\n        $table->string('password');\n        $table->rememberToken();\n        $table->timestamps();\n    });\n}\n"})})}),"\n",(0,r.jsxs)(n.p,{children:["Don't add any extra empty lines between ",(0,r.jsx)(n.code,{children:"{}"})," brackets."]}),"\n",(0,r.jsx)(n.admonition,{title:"good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"if ($foo) {\n    $this->foo = $foo;\n}\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"if ($foo) {\n\n    $this->foo = $foo;\n}\n"})})}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(n.p,{children:"Configuration files must use kebab-case."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"config/\n  pdf-generator.php\n"})}),"\n",(0,r.jsx)(n.p,{children:"Configuration keys must use snake_case."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"// config/pdf-generator.php\nreturn [\n    'chrome_path' => env('CHROME_PATH'),\n];\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Avoid using the ",(0,r.jsx)(n.code,{children:"env"})," helper outside of configuration files. Create a configuration value from the ",(0,r.jsx)(n.code,{children:"env"})," variable like above."]}),"\n",(0,r.jsxs)(n.p,{children:["When adding config values for a specific service, add them to the ",(0,r.jsx)(n.code,{children:"services"})," config file. Do not create a new config file."]}),"\n",(0,r.jsx)(n.admonition,{title:"good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"// Adding credentials to `config/services.php`\nreturn [\n    'ses' => [\n        'key' => env('SES_AWS_ACCESS_KEY_ID'),\n        'secret' => env('SES_AWS_SECRET_ACCESS_KEY'),\n        'region' => env('SES_AWS_DEFAULT_REGION', 'us-east-1'),\n    ],\n    \n    'github' => [\n        'username' => env('GITHUB_USERNAME'),\n        'token' => env('GITHUB_TOKEN'),\n        'client_id' => env('GITHUB_CLIENT_ID'),\n        'client_secret' => env('GITHUB_CLIENT_SECRET'),\n        'redirect' => env('GITHUB_CALLBACK_URL'),\n        'docs_access_token' => env('GITHUB_ACCESS_TOKEN'),\n    ],\n    \n    'weyland_yutani' => [\n        'token' => env('WEYLAND_YUTANI_TOKEN')\n    ],   \n];\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"// Creating a new config file: `weyland-yutani.php`\n\nreturn [\n    'weyland_yutani' => [\n        'token' => env('WEYLAND_YUTANI_TOKEN')\n    ],  \n]\n"})})}),"\n",(0,r.jsx)(n.h2,{id:"artisan-commands",children:"Artisan Commands"}),"\n",(0,r.jsx)(n.h3,{id:"naming",children:"Naming"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The names of Artisan commands must be in ",(0,r.jsx)(n.strong,{children:"kebab-case"}),". This ensures consistency and readability in the CLI."]}),"\n"]}),"\n",(0,r.jsx)(n.admonition,{title:"Good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"php artisan users:create-local\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"Bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"php artisan usersCreateLocal\n"})})}),"\n",(0,r.jsx)(n.h3,{id:"structure",children:"Structure"}),"\n",(0,r.jsx)(n.p,{children:"An Artisan command must always have a clear description and signature:"}),"\n",(0,r.jsx)(n.h4,{id:"example-1",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"protected $signature = 'users:create-local';\n\nprotected $description = 'Create a user for your local environment';\n"})}),"\n",(0,r.jsx)(n.h3,{id:"user-feedback",children:"User Feedback"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Provide clear feedback"})," during and after the execution of a command:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Inform the user about progress."}),"\n",(0,r.jsx)(n.li,{children:"Report results or errors."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:["Use helpers like ",(0,r.jsx)(n.code,{children:"info"}),", ",(0,r.jsx)(n.code,{children:"warning"}),", and ",(0,r.jsx)(n.code,{children:"form"})," for user interaction"]}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-2",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"public function handle(): void\n{\n    if (!app()->isLocal()) {\n        $this->warn('This command can only be run in local environment.');\n        return;\n    }\n\n    $user = form()\n        ->text('Email', required: true, validate: 'email', name: 'email')\n        ->text('First name', required: true, name: 'first_name')\n        ->text('Last name', required: true, name: 'last_name')\n        ->submit();\n\n    User::create($user);\n\n    $this->info(\"User {$user['first_name']} created successfully!\");\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"iterative-processing",children:"Iterative Processing"}),"\n",(0,r.jsx)(n.p,{children:"When processing multiple items:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Provide progressive feedback within a loop to inform users about the progress."}),"\n",(0,r.jsx)(n.li,{children:"Display a summary upon completion."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-3",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:'public function handle(): void\n{\n    $this->info("Starting to process users...");\n\n    User::all()->each(function ($user) {\n        $this->info("Processing user {$user->id}...");\n        // Process the user\n    });\n\n    $this->comment("All users processed successfully.");\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"routing",children:"Routing"}),"\n",(0,r.jsx)(n.h3,{id:"url-structure",children:"URL Structure"}),"\n",(0,r.jsxs)(n.p,{children:["Public-facing URLs must use ",(0,r.jsx)(n.strong,{children:"kebab-case"})," to ensure consistency and readability."]}),"\n",(0,r.jsx)(n.admonition,{title:"Good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"https://msml.nl/about-us\nhttps://msml.nl/blog/software-development-tips\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"Bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"https://msml.nl/AboutUs\nhttps://msml.nl/blog/softwareDevelopmentTips\n"})})}),"\n",(0,r.jsx)(n.h3,{id:"route-definition",children:"Route Definition"}),"\n",(0,r.jsx)(n.p,{children:"Prefer to use the route tuple notation whenever possible, as it is more explicit and type-safe."}),"\n",(0,r.jsx)(n.admonition,{title:"Good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"Route::get('about-us', [OpenSourceController::class, 'index']);\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"Bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"Route::get('about-us', 'OpenSourceController@index');\n"})})}),"\n",(0,r.jsx)(n.h3,{id:"route-names",children:"Route Names"}),"\n",(0,r.jsxs)(n.p,{children:["Route names must use ",(0,r.jsx)(n.strong,{children:"camelCase"})," for consistency."]}),"\n",(0,r.jsx)(n.admonition,{title:"Good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"Route::get('open-source', [OpenSourceController::class, 'index'])->name('openSource');\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"Bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"Route::get('open-source', [OpenSourceController::class, 'index'])->name('open-source');\n"})})}),"\n",(0,r.jsx)(n.h3,{id:"http-verb-placement",children:"HTTP Verb Placement"}),"\n",(0,r.jsx)(n.p,{children:"Always place the HTTP verb first in the route definition. This makes routes more scannable and consistent."}),"\n",(0,r.jsx)(n.admonition,{title:"Good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"Route::get('/', [HomeController::class, 'index'])->name('home');\nRoute::get('open-source', [OpenSourceController::class, 'index'])->name('openSource');\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"Bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"Route::name('home')->get('/', [HomeController::class, 'index']);\nRoute::name('openSource')->get([OpenSourceController::class, 'index']);\n"})})}),"\n",(0,r.jsx)(n.h3,{id:"route-parameters",children:"Route Parameters"}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.strong,{children:"camelCase"})," for route parameters."]}),"\n",(0,r.jsx)(n.admonition,{title:"Good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"Route::get('news/{newsItem}', [NewsItemsController::class, 'index']);\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"Bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"Route::get('news/{news_item}', [NewsItemsController::class, 'index']);\n"})})}),"\n",(0,r.jsx)(n.h3,{id:"url-formatting",children:"URL Formatting"}),"\n",(0,r.jsxs)(n.p,{children:["Routes should not start with a ",(0,r.jsx)(n.code,{children:"/"})," unless the URL would otherwise be empty."]}),"\n",(0,r.jsx)(n.admonition,{title:"Good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"Route::get('/', [HomeController::class, 'index']);\nRoute::get('open-source', [OpenSourceController::class, 'index']);\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"Bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"Route::get('', [HomeController::class, 'index']);\nRoute::get('/open-source', [OpenSourceController::class, 'index']);\n"})})}),"\n",(0,r.jsx)(n.h2,{id:"api-routing",children:"API Routing"}),"\n",(0,r.jsx)(n.h3,{id:"naming-conventions",children:"Naming Conventions"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Use the ",(0,r.jsx)(n.strong,{children:"plural"})," form of the resource name to reflect collections. For example, ",(0,r.jsx)(n.code,{children:"users"})," instead of ",(0,r.jsx)(n.code,{children:"user"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Always use ",(0,r.jsx)(n.strong,{children:"kebab-case"})," for resource names to maintain consistency and readability."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.admonition,{title:"Good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"/api/users\n/api/posts\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"Bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"/api/user\n/api_posts\n"})})}),"\n",(0,r.jsx)(n.h3,{id:"route-structure",children:"Route Structure"}),"\n",(0,r.jsx)(n.h4,{id:"limit-deep-nesting",children:"Limit Deep Nesting"}),"\n",(0,r.jsx)(n.p,{children:"Deeply nested routes make APIs harder to manage and understand. Avoid nesting beyond two levels whenever possible. Flatten routes for simplicity."}),"\n",(0,r.jsx)(n.admonition,{title:"Good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"/organizations/1/users\n/users/1/posts\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"Bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"/organizations/1/users/1/posts/1\n"})})}),"\n",(0,r.jsx)(n.h4,{id:"provide-context-when-necessary",children:"Provide Context When Necessary"}),"\n",(0,r.jsxs)(n.p,{children:["Nesting can be used sparingly when it provides meaningful context between related resources. For example, when accessing all users of a specific organization, nesting ",(0,r.jsx)(n.code,{children:"users"})," under ",(0,r.jsx)(n.code,{children:"organizations"})," is appropriate."]}),"\n",(0,r.jsx)(n.admonition,{title:"Good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"/organizations/1/users\n"})})}),"\n",(0,r.jsx)(n.h4,{id:"flatten-for-independence",children:"Flatten for Independence"}),"\n",(0,r.jsx)(n.p,{children:"When operations on a resource are independent of its parent, flatten the route structure."}),"\n",(0,r.jsx)(n.admonition,{title:"Good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"/users/1\n"})})}),"\n",(0,r.jsx)(n.h3,{id:"additional-guidelines",children:"Additional Guidelines"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"HTTP Verbs:"})," Use proper HTTP verbs for route actions (e.g., ",(0,r.jsx)(n.code,{children:"GET"}),", ",(0,r.jsx)(n.code,{children:"POST"}),", ",(0,r.jsx)(n.code,{children:"PUT"}),", ",(0,r.jsx)(n.code,{children:"DELETE"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Versioning:"})," Prefix API routes with a version number to ensure backward compatibility."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"example-4",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"Route::prefix('v1')->group(function () {\n    Route::get('users', [UserController::class, 'index']);\n    Route::get('users/{user}', [UserController::class, 'show']);\n    Route::post('users', [UserController::class, 'store']);\n    Route::put('users/{user}', [UserController::class, 'update']);\n    Route::delete('users/{user}', [UserController::class, 'destroy']);\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:"Following these conventions ensures a clean, scalable, and consistent API design."}),"\n",(0,r.jsx)(n.h2,{id:"controllers",children:"Controllers"}),"\n",(0,r.jsx)(n.p,{children:"Controllers that control a resource must use the plural resource name."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"class PostsController\n{\n    // ...\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Try to keep controllers simple and stick to the default CRUD keywords (",(0,r.jsx)(n.code,{children:"index"}),", ",(0,r.jsx)(n.code,{children:"create"}),", ",(0,r.jsx)(n.code,{children:"store"}),", ",(0,r.jsx)(n.code,{children:"show"}),", ",(0,r.jsx)(n.code,{children:"edit"}),", ",(0,r.jsx)(n.code,{children:"update"}),", ",(0,r.jsx)(n.code,{children:"destroy"}),"). Extract a new controller if you need other actions."]}),"\n",(0,r.jsxs)(n.p,{children:["In the following example, we could have ",(0,r.jsx)(n.code,{children:"PostsController@favorite"}),", and ",(0,r.jsx)(n.code,{children:"PostsController@unfavorite"}),", or we could extract it to a separate ",(0,r.jsx)(n.code,{children:"FavoritePostsController"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"class PostsController\n{\n    public function create()\n    {\n        // ...\n    }\n\n    // ...\n\n    public function favorite(Post $post)\n    {\n        request()->user()->favorites()->attach($post);\n\n        return response(null, 200);\n    }\n\n    public function unfavorite(Post $post)\n    {\n        request()->user()->favorites()->detach($post);\n\n        return response(null, 200);\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Here we fall back to default CRUD words, ",(0,r.jsx)(n.code,{children:"store"})," and ",(0,r.jsx)(n.code,{children:"destroy"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"class FavoritePostsController\n{\n    public function store(Post $post)\n    {\n        request()->user()->favorites()->attach($post);\n\n        return response(null, 200);\n    }\n\n    public function destroy(Post $post)\n    {\n        request()->user()->favorites()->detach($post);\n\n        return response(null, 200);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"This is a loose guideline that doesn't need to be enforced."}),"\n",(0,r.jsx)(n.h2,{id:"views",children:"Views"}),"\n",(0,r.jsx)(n.p,{children:"View files must use camelCase."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"resources/\n  views/\n    openSource.blade.php\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"class OpenSourceController\n{\n    public function index() {\n        return view('openSource');\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"validation",children:"Validation"}),"\n",(0,r.jsxs)(n.p,{children:["When using multiple rules for one field in a form request, avoid using ",(0,r.jsx)(n.code,{children:"|"}),", always use array notation. Using an array notation will make it easier to apply custom rule classes to a field."]}),"\n",(0,r.jsx)(n.admonition,{title:"good",type:"tip",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"public function rules()\n{\n    return [\n        'email' => ['required', 'email'],\n    ];\n}\n"})})}),"\n",(0,r.jsx)(n.admonition,{title:"bad",type:"warning",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"public function rules()\n{\n    return [\n        'email' => 'required|email',\n    ];\n}\n"})})}),"\n",(0,r.jsx)(n.p,{children:"All custom validation rules must use snake_case:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"Validator::extend('organisation_type', function ($attribute, $value) {\n    return OrganisationType::isValid($value);\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"blade-templates",children:"Blade Templates"}),"\n",(0,r.jsx)(n.p,{children:"Indent using four spaces."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:'<a href="/open-source">\n    Open Source\n</a>\n'})}),"\n",(0,r.jsx)(n.p,{children:"Don't add spaces after control structures."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"@if($condition)\n    Something\n@endif\n"})}),"\n",(0,r.jsx)(n.h2,{id:"authorization",children:"Authorization"}),"\n",(0,r.jsx)(n.p,{children:"Policies must use camelCase."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"Gate::define('editPost', function ($user, $post) {\n    return $user->id == $post->user_id;\n});\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-html",children:"@can('editPost', $post)\n    <a href=\"{{ route('posts.edit', $post) }}\">\n        Edit\n    </a>\n@endcan\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Try to name abilities using default CRUD words. One exception: replace ",(0,r.jsx)(n.code,{children:"show"})," with ",(0,r.jsx)(n.code,{children:"view"}),". A server shows a resource, a user views it."]}),"\n",(0,r.jsx)(n.h2,{id:"translations",children:"Translations"}),"\n",(0,r.jsxs)(n.p,{children:["Translations must be rendered with the ",(0,r.jsx)(n.code,{children:"__"})," function. We prefer using this over ",(0,r.jsx)(n.code,{children:"@lang"})," in Blade views because ",(0,r.jsx)(n.code,{children:"__"})," can be used in both Blade views and regular PHP code. Here's an example:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",children:"<h2>{{ __('newsletter.form.title') }}</h2>\n\n{!!__('newsletter.form.description') !!}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"naming-classes",children:"Naming Classes"}),"\n",(0,r.jsx)(n.p,{children:"Naming classes consistently improves code readability, maintainability, and reduces naming conflicts. Below are guidelines for naming different class types, along with examples using namespaces."}),"\n",(0,r.jsx)(n.h3,{id:"general-rules",children:"General Rules"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.strong,{children:"PascalCase"})," for class names."]}),"\n",(0,r.jsx)(n.li,{children:"Avoid abbreviations unless they are well-known."}),"\n",(0,r.jsxs)(n.li,{children:["Include suffixes like ",(0,r.jsx)(n.code,{children:"Controller"}),", ",(0,r.jsx)(n.code,{children:"Resource"}),", ",(0,r.jsx)(n.code,{children:"Listener"}),", etc., to clarify intent and avoid naming conflicts."]}),"\n",(0,r.jsx)(n.li,{children:"Follow a consistent folder structure to group related classes logically."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"controllers-1",children:"Controllers"}),"\n",(0,r.jsx)(n.h4,{id:"naming-convention",children:"Naming Convention:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Resourceful Controllers:"})," Use the plural form of the resource, suffixed with ",(0,r.jsx)(n.code,{children:"Controller"}),"."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Example:",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"App\\Http\\Controllers\\UsersController"})}),(0,r.jsx)(n.br,{}),"\n","Handles actions for user resources."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Non-resourceful Controllers:"})," Name after the specific action, suffixed with ",(0,r.jsx)(n.code,{children:"Controller"}),"."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Example:",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"App\\Http\\Controllers\\GenerateReportController"})}),(0,r.jsx)(n.br,{}),"\n","Handles generating a specific report."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Folder Structure:"})," Group controllers by domain or functionality."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Example Folder Structure:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Http\n\u251c\u2500\u2500 Controllers\n\u2502   \u251c\u2500\u2500 Api\n\u2502   \u251c\u2500\u2500 Portal\n\u2502   \u2502   \u251c\u2500\u2500 Auth\n\u2502   \u2502   \u251c\u2500\u2500 Calendar\n\u2502   \u2502   \u251c\u2500\u2500 Dashboard\n\u2502   \u2502   \u251c\u2500\u2500 News\n\u2502   \u2502   \u251c\u2500\u2500 Profile\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 ProfileController.php\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 ProfileSettingsController.php\n\u2502   \u2502   \u251c\u2500\u2500 Roles\n\u2502   \u2502   \u251c\u2500\u2500 Settings\n\u2502   \u2502   \u251c\u2500\u2500 Users\n\u2502   \u2502       \u2514\u2500\u2500 UserController.php\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"resources-and-transformers",children:"Resources (and Transformers)"}),"\n",(0,r.jsx)(n.h4,{id:"naming-convention-1",children:"Naming Convention:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use the plural form of the resource, suffixed with ",(0,r.jsx)(n.code,{children:"Resource"})," or ",(0,r.jsx)(n.code,{children:"Transformer"}),".","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Examples:",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"App\\Http\\Resources\\Api\\Users\\UserResource"})}),(0,r.jsx)(n.br,{}),"\n","A resource representation for an individual user for API endpoints.",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"App\\Http\\Resources\\Portal\\Users\\UserResource"})}),(0,r.jsx)(n.br,{}),"\n","A resource representation for an individual user for portal-specific views.",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"App\\Transformers\\Users\\UserTransformer"})}),(0,r.jsx)(n.br,{}),"\n","A transformer for formatting user data."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"request-classes",children:"Request Classes"}),"\n",(0,r.jsx)(n.h4,{id:"naming-convention-2",children:"Naming Convention:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Requests should describe their purpose, suffixed with ",(0,r.jsx)(n.code,{children:"Request"}),".","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Examples:",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"App\\Http\\Requests\\Api\\Users\\StoreUserRequest"})}),(0,r.jsx)(n.br,{}),"\n","Validates input for creating a new user through API endpoints.",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"App\\Http\\Requests\\Portal\\Users\\StoreUserRequest"})}),(0,r.jsx)(n.br,{}),"\n","Validates input for creating a new user in portal-specific views.",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"App\\Http\\Requests\\Api\\Users\\UpdateUserRequest"})}),(0,r.jsx)(n.br,{}),"\n","Validates input for updating an existing user through API endpoints.",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"App\\Http\\Requests\\Portal\\Users\\UpdateUserRequest"})}),(0,r.jsx)(n.br,{}),"\n","Validates input for updating an existing user in portal-specific views."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"jobs",children:"Jobs"}),"\n",(0,r.jsx)(n.h4,{id:"naming-convention-3",children:"Naming Convention:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use an action-oriented name to describe the job.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Examples:",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"App\\Jobs\\Users\\CreateUserJob"})}),(0,r.jsx)(n.br,{}),"\n","Handles user creation logic.",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"App\\Jobs\\Reports\\GenerateMonthlyReportJob"})}),(0,r.jsx)(n.br,{}),"\n","Generates monthly reports asynchronously."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"events",children:"Events"}),"\n",(0,r.jsx)(n.h4,{id:"naming-convention-4",children:"Naming Convention:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Use tense to reflect timing consistently:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Before Action:"})," Use present participle.",(0,r.jsx)(n.br,{}),"\n","Example: ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"App\\Events\\Users\\UserCreating"})})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"After Action:"})," Use past tense.",(0,r.jsx)(n.br,{}),"\n","Example: ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"App\\Events\\Users\\UserCreated"})})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Folder Structure:"})," Organize by domain for consistency."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Example:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Events\n\u251c\u2500\u2500 Users\n\u2502   \u251c\u2500\u2500 UserCreating.php\n\u2502   \u2514\u2500\u2500 UserCreated.php\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"listeners",children:"Listeners"}),"\n",(0,r.jsx)(n.h4,{id:"naming-convention-5",children:"Naming Convention:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Reflect the action performed, suffixed with ",(0,r.jsx)(n.code,{children:"Listener"}),".","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Example:",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"App\\Listeners\\Users\\SendWelcomeEmailListener"})}),(0,r.jsx)(n.br,{}),"\n","Sends a welcome email when a user is created."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"commands",children:"Commands"}),"\n",(0,r.jsx)(n.h4,{id:"naming-convention-6",children:"Naming Convention:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Describe the action, suffixed with ",(0,r.jsx)(n.code,{children:"Command"}),".","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Example:",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"App\\Console\\Commands\\PublishScheduledPostsCommand"})}),(0,r.jsx)(n.br,{}),"\n","Publishes scheduled posts via the CLI."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"mailables",children:"Mailables"}),"\n",(0,r.jsx)(n.h4,{id:"naming-convention-7",children:"Naming Convention:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Describe the purpose, suffixed with ",(0,r.jsx)(n.code,{children:"Mail"}),".","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Examples:",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"App\\Mail\\Users\\WelcomeUserMail"})}),(0,r.jsx)(n.br,{}),"\n","Sends a welcome email to a new user.",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"App\\Mail\\Reports\\MonthlyReportMail"})}),(0,r.jsx)(n.br,{}),"\n","Emails the monthly report to recipients."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"enums-1",children:"Enums"}),"\n",(0,r.jsx)(n.h4,{id:"naming-convention-8",children:"Naming Convention:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use descriptive names without prefixes or suffixes.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Examples:",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"App\\Enums\\OrderStatus"})}),(0,r.jsx)(n.br,{}),"\n","Enum for order status types.",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"App\\Enums\\UserRole"})}),(0,r.jsx)(n.br,{}),"\n","Enum for user roles."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"example-directory-structure",children:"Example Directory Structure"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"App\n\u251c\u2500\u2500 Http\n\u2502   \u251c\u2500\u2500 Controllers\n\u2502   \u2502   \u251c\u2500\u2500 Api\n\u2502   \u2502   \u251c\u2500\u2500 Portal\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Auth\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Calendar\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Dashboard\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 News\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Profile\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 ProfileController.php\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 ProfileSettingsController.php\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Roles\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Settings\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 Users\n\u2502   \u2502   \u2502       \u2514\u2500\u2500 UserController.php\n\u251c\u2500\u2500 Events\n\u2502   \u251c\u2500\u2500 Users\n\u2502   \u2502   \u251c\u2500\u2500 UserCreating.php\n\u2502   \u2502   \u2514\u2500\u2500 UserCreated.php\n\u251c\u2500\u2500 Requests\n\u2502   \u251c\u2500\u2500 Api\n\u2502   \u2502   \u251c\u2500\u2500 Portal\n\u2502   \u2502       \u2514\u2500\u2500 Auth\n\u2502   \u2502           \u251c\u2500\u2500 StoreUserRequest.php\n\u2502   \u2502           \u2514\u2500\u2500 UpdateUserRequest.php\n\u2502   \u251c\u2500\u2500 Portal\n\u2502   \u2502   \u251c\u2500\u2500 Users\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 StoreUserRequest.php\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 UpdateUserRequest.php\n\u251c\u2500\u2500 Resources\n\u2502   \u251c\u2500\u2500 Api\n\u2502   \u2502   \u251c\u2500\u2500 Users\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 UserResource.php\n\u2502   \u251c\u2500\u2500 Portal\n\u2502   \u2502   \u251c\u2500\u2500 Users\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 UserResource.php\n\u251c\u2500\u2500 Jobs\n\u2502   \u251c\u2500\u2500 Users\n\u2502   \u2502   \u2514\u2500\u2500 CreateUserJob.php\n"})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>o});var i=s(6540);const r={},l=i.createContext(r);function t(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);